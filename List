A list is an ordered sequence of elements that can have any length. 
Lists are a common data structure in computer programming.

In Prolog, lists are represented as a tree consisting of structures that have no arguments, 
an empty list, or two arguments: a head and a tail. The head is a used to store a particular term 
in the list and the tail is recursively the rest of the list. 
The end of a list is customarily represented as a tail that is set to an empty list.

The data structure used to represent lists in Prolog has a functor (name) of ".". 
Thus, a list with the single element a can be represented as: .(a, .()) and a list with 
elements a, b and c can be represented as: .(a, .(b, .(c, .()))). 

Prolog also supports a more concise syntax for writing lists. List notation consists of elements of 
the list separated by commas, and the whole list enclosed in square brackets. 
Thus, a list with the single element a can be represented as: [a] and a list with elements 
a, b and c can be represented as: [a, b, c]. An empty list can be represented by a opening square 
bracket followed by a closing square bracket: [].

It is common for Prolog programs to manipulate lists by splitting them into a head and a tail. 
The | character has a special meaning in Prolog syntax to separate the head and tail of a list. 
Thus the Prolog syntax [X|Y] represents a list with head X and tail Y.



?- numlist(1,9,L).
L = [1, 2, 3, 4, 5, 6, 7, 8, 9].

?- numlist(-1,10,L).
L = [-1, 0, 1, 2, 3, 4, 5, 6, 7|...].

?- sumlist([1+2, 3*4, 5],X).
X = 20.

?- atom_chars(A, [a, b, m ,i, n, k]).
A = abmink.

?- atom_chars('PROLOG',L).
L = ['P', 'R', 'O', 'L', 'O', 'G'].

?- atom_chars('Prolog',L).
L = ['P', r, o, l, o, g].

?- msort([3,1,7], L).
L = [1, 3, 7].

?- msort([39,101,77], L).
L = [39, 77, 101].

?- msort([39,101,77,23,26], L).
L = [23, 26, 39, 77, 101].





list([]).
list([X|Xs]) :- list(Xs).

?- list([a,b,c]).
yes

?- list(abc).
no





member

list_member(X,[X|Xs]).
list_member(X,[Y|Ys]) :- list_member(X,Ys).

?- list_member(X, [a,b,c]).
X = a
yes;

X = b
yes;

X = c
yes;


?- list_member(a, [a,b,c]).
yes;

?- list_member(b, [a,b,c]).
yes;

?- list_member(c, [a,b,c]).
yes;

?- list_member(d, [a,b,c]).
no







listlength

list_length([],0).
list_length([X|Xs],A) :- list_length(Xs,B), A is B+1.

?- list_length([],X).
X = 0
yes

?- list_length([a],X).
X = 1
yes;


?- list_length([a,b],X).
X = 2
yes;

?- list_length([a,b,c,d,e,f],X).
X = 6
yes;


?- list_length([a,b,c,d,e,f],6).
yes;


?- list_length([a,b,c,d,e,f],5).
no





?- permutation([a,b,c],X).
X = [a, b, c] 
X = [a, c, b] 
X = [b, a, c] 
X = [b, c, a] 
X = [c, a, b] 
X = [c, b, a] 
false.





?- permutation([1,2], [X,Y]).
X = 1,
Y = 2 
X = 2,
Y = 1 
 

?- select(b, [a,b,c,b], 2, X).
X = [a, 2, c, b] 
X = [a, b, c, 2] 






?- prefix(X, [a,b,c,d,e,f]).
X = [] 
X = [a] 
X = [a, b] 
X = [a, b, c] 
X = [a, b, c, d] 
X = [a, b, c, d, e] 
X = [a, b, c, d, e, f] 


?- prefix([X,b],[a,b,c]).
X = a.




















