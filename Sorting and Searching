Sorting and Searching

/* sorted(Xs, Ys)  holds when  Ys  is the sorted variant of Xs */
sorted(Xs, Ys) :- permutation(Xs, Ys), ordered(Ys).

/* permutation(Xs, Zs)  holds true if Zs is a reordering of Xs */
permutation([], []).
permutation(Xs, [Z|Zs]) :- select(Z, Xs, Ys),  permutation(Ys, Zs).

/* select(X, HasAnX, HasOneLessX)  "extracts" X from  HasAnX, giving HasOneLessX */
select(X, [X|Rest], Rest).
select(X, [Y|Ys], [Y|Zs]) :- select(X, Ys, Zs).

/* ordered(Xs)  holds true if the elements in Xs are ordered by =< */
ordered([]).
ordered([X]).
ordered([X,Y|Rest]) :- X =< Y,  ordered([Y|Rest]).



insertsort.pl

insertion_sort(Xs, Ys):-insertion_sort_1(Xs, [], Ys).

insertion_sort_1([], Ys, Ys).
insertion_sort_1([X|Xs], Ys0, Ys):- insert(Ys0, X, Ys1), insertion_sort_1(Xs, Ys1, Ys).
insert([Y|Ys], X, [Y|Zs]):-Y < X, !, insert(Ys, X, Zs).
insert(Ys, X, [X|Ys]).



/* isort(Xs, Ys)  generates  Ys  so that it is the sorted variant of Xs */
isort([], []).
isort([X|Xs], Ys) :-  isort(Xs, Zs), insert(X, Zs, Ys).

/* insert(X, L, LwithX)  inserts element X into list L, generating  LwithX */
insert(X, [], [X]).
insert(X, [Y|Ys], [X, Y | Ys]) :-  X =< Y.
insert(X, [Y|Ys], [Y|Zs]) :-  X > Y,  insert(X, Ys, Zs).


?- sorted([5,3,7,2,9,1], Ans).
Ans = [1, 2, 3, 5, 7, 9] .

?- isort([2,3,1,4,6,8,5],KKK).
KKK = [1, 2, 3, 4, 5, 6, 8] .




mergesort.pl

merge_sort(List, SortedList):- length(List, Length), merge_sort_1(Length, List, SortedList, []).
 
                                                            
merge_sort_1(0, Rest, [], Rest):-!.
merge_sort_1(1, [A|Rest], [A], Rest):-!.
merge_sort_1(2, [A,B|Rest], C, Rest):-A <= B, !, C = [A,B].

merge_sort_1(2, [A,B|Rest], C, Rest):-/* A > B, */ !, C = [B,A].
merge_sort_1(N, List, Sorted, Rest):- N1 = N div 2, N2 = N - N1,
  merge_sort_1(N1, List, SortedLeft, TempList),
  merge_sort_1(N2, TempList, SortedRight, Rest),
  ordered_merge(SortedLeft, SortedRight, Sorted).
 

ordered_merge([X|Xs], [Y|Ys], [Y|Zs]):- Y <= X, !,ordered_merge([X|Xs], Ys, Zs).
ordered_merge([X|Xs], Ys, [X|Zs]):-  ordered_merge(Xs, Ys, Zs).
ordered_merge([], Ys, Ys).


length(Xs, L):-length_1(Xs, 0, L).

length_1([], L, L).
length_1([_|Xs], L0, L):-L1 = L0 + 1, length_1(Xs, L1, L).








bubble_sort.pl

% bubble(+CurrentMax, +List, -ListWithoutMax, -Max)
% i think the parameters are self-explanatory here
% ! needed, because input args are the same in 2nd and 3rd line
bubble(X, [], [], X).
bubble(X, [Y|T], [Y|NT], Max) :- X>Y, bubble(X, T, NT, Max), !.
bubble(X, [Y|T], [X|NT], Max) :- X=<Y, bubble(Y, T, NT, Max).

% notice that the third line could be 
% bubble(X, [Y|T], [X|NT], Max) :- bubble(Y, T, NT, Max).
% because if X>Y it gets stopped by the ! in the 2nd line

% it is run as in 
% b_sort([H|T], Acc, Sorted) :- bubble(H, T, NT, Max), b_sort(NT, [Max|Acc], Sorted), !.
% meaning that the current max is the element of the list upon which the bubbling is performed

test_bubble(N, M) :- bubble(3, [18,  6,  5,  2,  8, 15, 13, 14,  0, 12,  7,  9, 10, 19, 16, 11], N, M).
% M = 19,
% N = [3, 6, 5, 2, 8, 15, 13, 14, 0, 12, 7, 9, 10, 18, 16, 11]


% b_sort(+List, +SortedAccumulator, -ListMergedWithAcc)
% prepends the accumulator with maximal element of the list and runs self again without the max element
% notice that in oder to work properly to accumulator needs to be sorted and all elements of the accumulator need to be greater or equal to max(List), hence the name
% ! needed - found by trial and error, I will explain this when I get it
b_sort([], Acc, Acc).
b_sort([H|T], Acc, Sorted) :- bubble(H, T, NT, Max), b_sort(NT, [Max|Acc], Sorted), !.

test_b_sort(S) :- b_sort([ 3, 6, 5, 2, 8, 15, 13, 14, 0, 12, 7, 9, 10, 11, 1, 4], [16, 17, 18, 19], S).
% S = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]


% bubble_sort(+List, -Sorted)
% runs the b_sort with [] as accumulator
bubble_sort(List, Sorted):-b_sort(List, [], Sorted).

test_bubble_sort(S).
% S = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]







quicksort.pl

% pivoting(+Pivot, +List, -Lesser, -Greater)
% returns divides the list into 2 lists one contating elements lesser than (or equal to) the pivot and the other greater
% ! is not needed as there is no differance in the input parameters of the predicate 
%   and the value check is performed after "going into" the predicates body
pivoting(_, [], [], []) :- !.
pivoting(P, [H|T], [H|L], G) :- H=<P, pivoting(P, T, L, G), !.
pivoting(P, [H|T], L, [H|G]) :- H>P, pivoting(P, T, L, G).
% lista[0]
% lista[1:]
% to better explain that the order of lines defines where to put the !
% here is the same predicate with the second and third line switched
% pivoting(_, [], [], []).
% pivoting(H, [X|T], L, [X|G]) :- X>H, pivoting(H, T, L, G), !.
% pivoting(H, [X|T], [X|L], G) :- X=<H, pivoting(H, T, L, G).

test_pivoting(L, G) :- pivoting(10, [ 3, 18, 6, 5, 2, 8, 15, 13, 14, 0, 12, 7, 9, 10, 19, 16, 11, 1, 4, 17], L, G).
% G = [18, 15, 13, 14, 12, 19, 16, 11, 17]
% L = [3, 6, 5, 2, 8, 0, 7, 9, 10, 1, 4]

% as you can see the pivtiong preserves order which has no implications to us, 
% but is logical when you understand the implementation


% quick_sort(+List, -SortedList)
% sorts the list
% first it chooses the pivot (first element) 
% then it divides the rest of the list into elements 2 lists (less or equal than the pivot and the rest) using pivoting predicate
% then it recursively sorts both lists
% finally it concatenates the sorted lists with pivot inbetween 
% (as we know it is greater than or equal to the greates elements of the first list and less than the least element of the second list)
% both ! are needed I'm not now  sure why but I checked it and the interpreter tried to find other fitting options
quick_sort([], []) :- !.
quick_sort([H|T], Sorted):-
    pivoting(H, T, L, G), 
    quick_sort(L, SortedL), 
    quick_sort(G, SortedG),
    append(SortedL, [H|SortedG], Sorted),
    !.

test_quick_sort(S) :- quick_sort([ 3, 18,  6,  5,  2,  8, 15, 13, 14,  0, 12,  7,  9, 10, 19, 16, 11, 1, 4, 17], S). 
% S = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]





isort([], []).
isort([X|Xs], Ys) :-  isort(Xs, Zs), insert(X, Zs, Ys).
insert(X, [], [X]).
insert(X, [Y|Ys], [X, Y | Ys]) :-  X =< Y.
insert(X, [Y|Ys], [Y|Zs]) :-  X > Y,  insert(X, Ys, Zs).







bubblesort(Ls0, Ls) :-
    (	append(Lefts, [A,B|Rights], Ls0), A @> B ->
	append(Lefts, [B,A|Rights], Ls1),
	bubblesort(Ls1, Ls)
    ;	Ls = Ls0
    ).


 
 
 

partition(_,[],[],[]).
partition(P,[H|T],[H|L],R) :- H =< P, partition(P,T,L,R).
partition(P,[H|T],L,[H|R]) :- H > P, partition(P,T,L,R).
% quicksort(+List,-DiffList)
quicksort([],A-A).
quicksort([P|T],L1-R2) :-
 partition(P,T,L,R),
 quicksort(L,L1-[P|R1]), quicksort(R,R1-R2).








merge(List, List, []).
merge(List, [], List).
merge([MinList1|RestMerged], [MinList1|RestList1], [MinList2|RestList2]) :-
  MinList1 =< MinList2,

merge(RestMerged,RestList1,[MinList2|RestList2]).
merge([MinList2|RestMerged], [MinList1|RestList1], [MinList2|RestList2]) :-
  MinList2 =< MinList1,
  merge(RestMerged,[MinList1|RestList1],RestList2).

mergeSort([], []).
mergeSort([A], [A|[]]).
mergeSort(Sorted, List) :-
  length(List, N),
  FirstLength is //(N, 2),
  SecondLength is N - FirstLength,
  length(FirstUnsorted, FirstLength),
  length(SecondUnsorted, SecondLength),
  append(FirstUnsorted, SecondUnsorted, List),
  mergeSort(FirstSorted, FirstUnsorted),
  mergeSort(SecondSorted, SecondUnsorted),
merge(Sorted, FirstSorted, SecondSorted).
















