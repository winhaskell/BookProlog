Graph is another data structure that is widely used in current algorithms. 
In this lecture we will describe a representation of graphs in Prolog 
and we will develop some programs for typical graph operations.

edge(1, 3).
edge(1, 5).
edge(2, 4).
edge(3, 2).
edge(3, 5).
edge(4, 3).
edge(6, 1).
edge(6, 5).

% "connected" if there is there a way to get from X to Z.
connected(X, Y) :- edge(X, Y).
connected(X, Y) :- edge(X, Z), connected(Z, Y).

% "path" if the third arg is a path from X to Y.
path(X, Y, [X,Y]) :- edge(X, Y).
path(X, Y, [X|Path]) :-
    edge(X, Z),
    path(Z, Y, Path).
    
    
    
    
Graph is another data structure that is widely used in current algorithms. 
In this lecture we will describe a representation of graphs in Prolog and 
we will develop some programs for typical graph operations.

%  a --- b --- e
%   \         /
%    \       /
%     c --- d --- f
%            \
%             \
%              g

We could represent the above using the following facts in Prolog:

path(a,b).
path(b,e).
path(a,c).
path(c,d).
path(e,d).
path(d,f).
path(d,g).

Now all we need is to define a simple predicate that can calculate paths by composition 
of existing paths. For example if X is connected to Z and Z is connected to Y then 
there is a path between X and Y, which is Prolog is very similar to the sentence we just wrote:

path(X,Y) :-path(X,Z), path(Z,Y).



edge(a,b).
edge(b,e).
edge(a,c).
edge(c,d).
edge(e,d).
edge(d,f).
edge(d,g).
edge(g,d).

path(X, Y) :- path(X,Y,[]).

path(X, Y, _) :- edge(X,Y).
path(X, Y, V) :- \+ member(X, V), edge(X, Z), path(Z, Y, [X|V]).



% "noloop" if there is a path from X to Y using the listed visited nodes in the path.
noloop(X, Y, [X,Y]) :- edge(X, Y).
noloop(X, Y, [X|Path]) :-
    edge(X, Z),
    \+ member(X, Path),
    noloop(Z, Y, Path).





%  a -1- b -2- e
%   \         /
%   3        3
%    \       /
%     c -2- d -2- f
%            \
%            3
%             \
%              g
%

edge(a,b,1).
edge(b,e,2).
edge(a,c,3).
edge(c,d,2).
edge(e,d,3).
edge(d,f,2).
edge(d,g,3).



findapath(X, Y, W, [X,Y], _) :- edge(X, Y, W).
findapath(X, Y, W, [X|P], V) :- \+ member(X, V),
                                 edge(X, Z, W1),
                                 findapath(Z, Y, W2, P, [X|V]),
                                 W is W1 + W2.
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
?- edge(1,3).
true .

?- edge(6,3).
false.

?- edge(6,5).
true.

?- connected(6,5).
true .

?- path(1,5,P).
P = [1, 5] ;
P = [1, 3, 5] ;
P = [1, 3, 2, 4, 3, 5] ;
P = [1, 3, 2, 4, 3, 2, 4, 3, 5] ;
P = [1, 3, 2, 4, 3, 2, 4, 3, 2|...] ;









    







