Graph search algorithms

Graph search algorithms explore a graph either for general discovery or explicit search. 
These algorithms carve paths through the graph, but there is no expectation that those 
paths are computationally optimal. We will cover Breadth First Search and Depth First Search 
because they are fundamental for traversing a graph and are often a required first step 
for many other types of analysis.

DFS

node(a). node(b).
node(c). node(d).
node(e). node(f).
node(g). node(h).
node(k). node(m).
node(p). node(s).
edge(a, b). edge(a, c). edge(a, g).
edge(b, a). edge(b, c).
edge(c, e). edge(c, d).
edge(d, f).
edge(e, g). edge(e, f). edge(e, h).
edge(f, k).
edge(g, c). edge(g, e).
edge(m, d).
edge(p, b). edge(p, d).

node(a, [b, c, g]). 
node(b, [a, c]).
node(c, [e, d]). 
node(d, [f]).
node(e, [g, f, h]). 
node(f, [k]).
node(g, [c, e]). 
node(h, []).
node(k, []). 
node(m, [d]).
node(p, [b, d]). 
node(s, []).

dfs(From, To, _, [edge(From, To)]):-
  edge(From, To).
dfs(From, To, VisitedNodes, [(From, X)|TailPath]):-
  edge(From, X), 
  not(member(X, VisitedNodes)),
  dfs(X, To, [From|VisitedNodes], TailPath).
  
  
  
  
  
BFS

connected(a,b,1).
connected(a,c,1).
connected(b,d,1).
connected(b,e,1).
connected(c,f,1).
connected(c,g,1).
connected(d,h,1).
connected(e,h,1).
connected(f,h,1).
connected(g,h,1).

connected2(X,Y,D) :- connected(X,Y,D).
connected2(X,Y,D) :- connected(Y,X,D).

next_node(Current, Next, Path) :-
    connected2(Current, Next, _),
    not(member(Next, Path)).

breadth_first(Goal, Goal, _,[Goal]).
breadth_first(Start, Goal, Visited, Path) :-
    findall(X, (connected2(X,Start,_),not(member(X,Visited))),
            [T|Extend]),
    write(Visited), nl,
    append(Visited, [T|Extend], Visited2),
    append(Path, [T|Extend], [Next|Path2]),
    breadth_first(Next, Goal, Visited2, Path2).



  















