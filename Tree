In graph theory, a tree is an undirected graph in which any two nodes are connected by exactly one path.

In Prolog, trees are of special significance because Prolog terms naturally correspond to trees.

For example, we can fairly enumerate binary trees as follows:
tree(nil) --> [].
tree(node(_, Left, Right)) --> [_], tree(Left), tree(Right).
    

Sample query:
?- length(Ls, _), phrase(tree(T), Ls).
   Ls = [], T = nil
;  Ls = [_A], T = node(_B,nil,nil)
;  Ls = [_A,_B], T = node(_C,nil,node(_D,nil,nil))
;  Ls = [_A,_B], T = node(_C,node(_D,nil,nil),nil)
;  Ls = [_A,_B,_C], T = node(_D,nil,node(_E,nil,node(_F,nil,nil)))
;  ... .



% tree(Tree)
% "Tree" is a binary tree.

tree(void).
tree(tree(_,Left,Right)) :-  tree(Left),
                             tree(Right).



% tree_member(Element,Tree)
% "Element" is an element of the binary tree "Tree".

tree_member(X,tree(X,_,_)).
tree_member(X,tree(_,Left,_)) :- tree_member(X,Left).
tree_member(X,tree(_,_,Right)) :- tree_member(X,Right).




?- istree(t(a,k(b,nil,nil),nil)).
false.

?- istree(t(a,t(b,nil,nil),nil)).
true.

?- istree(t(a,t(b,t(d,nil,nil),t(e,nil,nil)),t(c,nil,t(f,t(g,nil,nil),nil)))).
true.



?- cbal_tree(0,Tree).
Tree = nil.

?- cbal_tree(1,Tree).
Tree = t(x, nil, nil).

?- cbal_tree(2,Tree).
Tree = t(x, nil, t(x, nil, nil)) ;
Tree = t(x, t(x, nil, nil), nil).

?- cbal_tree(3,Tree).
Tree = t(x, t(x, nil, nil), t(x, nil, nil)).

?- cbal_tree(4,Tree).
Tree = t(x, t(x, nil, nil), t(x, nil, t(x, nil, nil))) ;
Tree = t(x, t(x, nil, nil), t(x, t(x, nil, nil), nil)) ;
Tree = t(x, t(x, nil, t(x, nil, nil)), t(x, nil, nil)) ;
Tree = t(x, t(x, t(x, nil, nil), nil), t(x, nil, nil)).

?- cbal_tree(4,Tree).
Tree = t(x, t(x, nil, nil), t(x, nil, t(x, nil, nil))) ;
Tree = t(x, t(x, nil, nil), t(x, t(x, nil, nil), nil)) ;
Tree = t(x, t(x, nil, t(x, nil, nil)), t(x, nil, nil)) ;
Tree = t(x, t(x, t(x, nil, nil), nil), t(x, nil, nil)).




?- symmetric(t(a,nil,nil)).
true.

?- symmetric(t(a,t(a,nil,nil),t(a,nil,nil))).
true.

?- symmetric(t(a,t(a,nil,nil),t(i,nil,nil))).
true.

?- symmetric( t(x, t(x, nil, nil), t(x, nil, nil))).
true.

?- symmetric(t(x, t(x, nil, nil), t(x, nil, t(x, nil, nil)))).
false.





?- hbal_tree_nodes(N,T).
N = 0,
T = nil.

?- hbal_tree_nodes(15,T).
T = t(x, t(x, t(x, t(x, nil, nil), t(x, nil, nil)), t(x, t(x, nil, nil), t(x, nil, nil))),
t(x, t(x, t(x, nil, nil), t(x, nil, nil)), t(x, t(x, nil, nil), t(x, nil, nil)))) .

?- hbal_tree_nodes(3,T).
T = t(x, t(x, nil, nil), t(x, nil, nil)) .

?- hbal_tree_nodes(4,T).
T = t(x, t(x, t(x, nil, nil), nil), t(x, nil, nil)) .

?- hbal_tree_nodes(5,T).
T = t(x, t(x, t(x, nil, nil), nil), t(x, t(x, nil, nil), nil)) .

?- hbal_tree_nodes(7,T).
T = t(x, t(x, t(x, nil, nil), t(x, nil, nil)), t(x, t(x, nil, nil), t(x, nil, nil))) .






   
?- sumtree(tree(5,tree(2,tree(1,void,void),tree(4,tree(3,void,void),void)),tree(6,void,void)), S).
S = 21.




btInsert(E, nil, bt(E, nil, nil)).
btInsert(E, bt(E, L, R), bt(E, L, R)).
btInsert(E, bt(E1, L, R), bt(E1, L1, R)) :- btInsert(E, L, L1), E < E1.
btInsert(E, bt(E1, L, R), bt(E1, L, R1)) :- btInsert(E, R, R1), E > E1.

?- btInsert(75, bt(_, nil, nil), T).
T = bt(75, nil, nil) .

?- btInsert(65, bt(75, nil, nil), T).
T = bt(75, bt(65, nil, nil), nil) .

?- btInsert(33,  bt(75, bt(65, nil, nil), nil), T).
T = bt(75, bt(65, bt(33, nil, nil), nil), nil) .









